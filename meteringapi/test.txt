{
    "first_name":"Akol",
    "last_name":"Oscar",
    "email":"oscarekireh@gmail.com",
    "phone_number":"0755676557",
    "password":"Footballstar10#",
    "confirm_password":"Footballstar10#",
    "gender":"male"
}

{
    
    "email":"oscarekireh@gmail.com",
    "password":"Footballstar10#"
}

{
    "receiver_meter_no": 123456,
    "no_units":10,
    "message": "From Emorut"
}

{
    "amount":20000,
    "phone_number":"256755676557"
}








import requests
import logging
from django.conf import settings
from django.http import JsonResponse
from meter.models import Meter
from transactions.models import UnitTransaction
from .serializers import SendUnitSerializer
from rest_framework.generics import (
    CreateAPIView,
    GenericAPIView,
)
from rest_framework.permissions import AllowAny, IsAuthenticated
from rest_framework import status, viewsets, mixins
from rest_framework.response import Response
from rest_framework.views import APIView
from utils.models import UnitReceiverResponse

base_url = settings.BASE_URL

logger = logging.getLogger(__name__)


class SendUnitsView(GenericAPIView):

    permission_classes = (IsAuthenticated,)
    serializer_class = SendUnitSerializer

    def post(self, request, *args, **kwargs):
        serializer = self.serializer_class(data=request.data)
        serializer.is_valid(raise_exception=True)
        receiver_meter_no = request.data.get("receiver_meter_no")
        user = request.user

        try:
            sender_meter = Meter.objects.get(user=user)
            receiver_meter = Meter.objects.get(meter_no=receiver_meter_no)
            if receiver_meter and sender_meter:
                units_to_send = request.data.get('no_units')  # Units to add
                user_message = request.data.get('message')
                receiver_meter_no = request.data.get("receiver_meter_no")
                if not units_to_send:
                    message = (
                        "Invalid units value"
                    )
                    response_data = {
                        "message": message,
                    }
                    return Response(response_data, status=status.HTTP_400_BAD_REQUEST)

                units_to_send = int(units_to_send)
                
                # Ensure there are enough units in the system
                if sender_meter.units < units_to_send:
                    message = (
                        "You don't have enough units"
                    )
                    response_data = {
                        "error": message,
                    }
                    return Response(response_data, status=status.HTTP_400_BAD_REQUEST)
                
                sender_transaction = UnitTransaction.objects.create(
                    sender=user,
                    receiver=receiver_meter.user,
                    units=units_to_send,
                    direction="Out",
                    meter=receiver_meter,
                    message=user_message

                )

                print("here")
                # Prepare data to send to the ESP32 meter
                payload = {"no_units": units_to_send,
                           "receiver_meter_no": receiver_meter_no,
                           "sender_meter_no": sender_meter.meter_no,
                           "message": user_message
                           
                           }
                url = f"http://{base_url}/meter/receive-units/"  # ESP32 meter endpoint

                # Send HTTP request to the ESP32
                response = requests.post(url, json=payload, timeout=5)
                print(response)

                if response == 200:
                    # Update the units in the database
                    sender_meter.units -= units_to_send
                    sender_meter.save()
                    receiver_meter.units += units_to_send
                    receiver_meter.save()
                    sender_transaction.status = "Completed"
                    sender_transaction.save()

                    message = (
                        "Units sent succesfully"
                    )
                    response_data = {
                        "message": message,
                    }
                    return Response(response_data, status=status.HTTP_200_OK)
                else:
                    sender_transaction.status = "Failed"
                    sender_transaction.save()
                    message = (
                        "Failed to send units"
                    )
                    response_data = {
                        "error": message,
                    }
                    return Response(response_data, status=status.HTTP_400_BAD_REQUEST)
            else:
                message = (
                        "Either sender meter or receiver meter does not exist"
                )
                response_data = {
                        "error": message,
                }
                return Response(response_data, status=status.HTTP_400_BAD_REQUEST)
        except Meter.DoesNotExist:
            message = (
                "Meter not found"
            )
            response_data = {
                "error": message,
            }
            return Response(response_data, status=status.HTTP_400_BAD_REQUEST)
        except requests.exceptions.RequestException as e:
      
            response_data = {
                "error": str(e),
            }
            return Response(response_data, status=status.HTTP_400_BAD_REQUEST)


class ReceiveUnitsView(APIView):


    def post(self, request, *args, **kwargs):
        meter_info = request.data
        logger.info(
            f"Receiver function called"
        )

        data = UnitReceiverResponse(**meter_info)
        receiver_meter_no = data.receiver_meter_no
        sender_meter_no = data.sender_meter_no
        no_units = data.no_units
        user_message = data.message

        print(f"{receiver_meter_no}")
        print(f"{sender_meter_no}")
        print(f"{no_units}")

        try:
            receiver_meter = Meter.objects.get(meter_no=receiver_meter_no)
            sender_meter = Meter.objects.get(meter_no=sender_meter_no)
            
            if receiver_meter and sender_meter:
                units_to_send = no_units # Units to add

                if not units_to_send:
                    message = (
                        "Invalid units value"
                    )
                    response_data = {
                        "message": message,
                    }
                    return Response(response_data, status=status.HTTP_400_BAD_REQUEST)
                
                units_to_send = int(units_to_send)
                
                # Ensure there are enough units in the system
                if sender_meter.units < units_to_send:
                    message = (
                        "You don't have enough units"
                    )
                    response_data = {
                        "error": message,
                    }
                    return Response(response_data, status=status.HTTP_400_BAD_REQUEST)
                
                sender_transaction = UnitTransaction.objects.create(
                    sender=sender_meter.user,
                    receiver=receiver_meter.user,
                    units=units_to_send,
                    direction="Out",
                    meter=receiver_meter,
                    message=user_message

                )


                # # Prepare data to send to the ESP32 meter
                # payload = {"units": units_to_send}
                # url = f"http://{receiver_meter.static_ip}/receive-units"
                # # Send HTTP request to the ESP32
                # response = requests.post(url, json=payload, timeout=5) 

                # if response.status == "success":
                #     # Update the units in the database
                #     sender_meter.units -= units_to_send
                #     sender_meter.save()
                #     receiver_meter.units += units_to_send
                #     receiver_meter.save()
                #     sender_transaction.status = "Completed"
                #     sender_transaction.save()

                #     message = (
                #         "Units sent succesfully"
                #     )
                #     response_data = {
                #         "message": message,
                #     }
                #     return Response(response_data, status=status.HTTP_200_0K)
                # else:
                #     sender_transaction.status = "Failed"
                #     sender_transaction.save()
                #     message = (
                #         "Failed to send units"
                #     )
                #     response_data = {
                #         "error": message,
                #     }
                #     return Response(response_data, status=status.HTTP_400_BAD_REQUEST) 
                message = (
                        "successfully sent"
                )
                response_data = {
                        "message": message,
                }
                return Response(response_data, status=status.HTTP_200_OK) 
            else:
                message = (
                        "Either sender meter or receiver meter does not exist"
                )
                response_data = {
                        "error": message,
                }
                return Response(response_data, status=status.HTTP_400_BAD_REQUEST)  
        except Meter.DoesNotExist:
            pass
        

        

